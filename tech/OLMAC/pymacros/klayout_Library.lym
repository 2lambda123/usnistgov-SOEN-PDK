<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description/>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>true</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text>

import pya

import sys, os
sys.path.append(os.path.realpath(os.path.join(os.path.dirname(__file__), '..')))
import olmac_pcells

from SiEPIC.utils import get_technology_by_name
# from SiEPIC.utils.pcells import KLayoutPCell


class OLMACCell(pya.PCellDeclarationHelper):
    TECHNOLOGY = get_technology_by_name('OLMAC')

class lywrap_wg_to_snspd(OLMACCell):
    def __init__(self):
        # Important: initialize the super class
        super().__init__()
        # declare the parameters
        # wgnw_width=0.1
        # wgnw_length=100
        # wgnw_gap=0.15
        # num_squares=5000.0
        # meander_width=0.4
        # meander_fill_factor=0.5
        # wg_width=0.75
        self.param("wgnw_length", self.TypeDouble, "Length", default = 100)

    def display_text_impl(self):
        # Provide a descriptive text for the cell
        return "SNSPD_%s" % self.wgnw_length

    def coerce_parameters_impl(self):
        pass

    def produce_impl(self):
        from olmac_pcells.detectors import wg_to_snspd
        D = wg_to_snspd(wgnw_length=self.wgnw_length)
        tempfile = os.path.realpath('temp.gds')
        D.write_gds(tempfile, auto_rename=False)
        templay = pya.Layout()
        templay.read(tempfile)
        os.remove(tempfile)
        tempcell = templay.top_cell()
        self.cell.name = tempcell.name
        self.cell.copy_tree(tempcell)


def lywrap(phidl_function):
    import inspect
    # return class



class OLMAC_Library(pya.Library):
    def __init__(self):
        tech_name = "OLMAC"
        library = tech_name

        print("Initializing '%s' Library." % library)

        self.description = "NIST SOEN"

        # Not doing fixed GDS

        self.layout().register_pcell("wg_to_snspd", lywrap_wg_to_snspd())

        # Register us the library with the technology name
        # If a library with that name already existed, it will be replaced then.
        self.register(library)

        if int(pya.Application.instance().version().split('.')[1]) &gt; 24:
            # KLayout v0.25 introduced technology variable:
            self.technology=tech_name

OLMAC_Library()

</text>
</klayout-macro>
