<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>OLMAC Design Rule Check (DRC)</description>
 <version/>
 <category>drc</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut>Ctrl+Shift+D</shortcut>
 <show-in-menu>true</show-in-menu>
 <group-name/>
 <menu-path>soen_menu.drc.end</menu-path>
 <interpreter>dsl</interpreter>
 <dsl-interpreter-name>drc-dsl-xml</dsl-interpreter-name>
 <text>

# DRC deck for OLMAC
# Alex Tait, 2018

# Read about DRC scripts in the User Manual under "Design Rule Check (DRC)"
# http://klayout.de/doc/manual/drc_basic.html

report("OLMAC DRC")
tiles(100)
tile_borders(2)
threads(3)

######## Helpers ########
def stub(layer, resize)
    # TODO i think this is builtin under the name "extended"
    # returns only the region between the layer and the resized layer
    return layer.sized(resize) ^ layer
end

$drcX = input(91, 0)
def exclusion_filter(ep)
    # This determines how DRC_exclude interacts with various reportable objects
    # Edge pairs are first converted to simple_polygons
    # If there is complete inclusion of one polygon in a DRC region, it is filtered out
    # I.e. If keeping, return the input. If throwing away, return nil
    #
    # Current status: only tested with edge pairs
    bep = polygon_layer
    unless ep.respond_to?(:simple_polygon)
        bep.insert(ep)
    else
        bep.insert(ep.simple_polygon(0))
    end
    if bep.not_inside($drcX).is_empty?
     return nil
    else
     return ep
    end
end

def input_drcX(layer, datatype = 0)
    # Calls typical input, but filters out polygons that are contained in a DRC exclude layer
    # Doing this on the input makes it way faster than doing it on the output
    raw_in = input(layer, datatype)
    return raw_in - $drcX
end

def output_drcX(report_group, err_name, message = nil)
    # Calls the typical output command, but removes anything in the DRC exclude region first
    if message.nil?
        message = err_name
    end
    filtered_group = report_group.collect_to_edge_pairs { |ep| exclusion_filter(ep) }
    filtered_group.output(err_name, message)
end


######## Input the layers ########
si_deep = input(22, 0).smoothed(0.1) - $drcX
si_deep_photo = input(22, 1).smoothed(0.1) - $drcX
si_shallow = input(21, 0).smoothed(0.1) - $drcX

dp_pp = input(1, 0) - $drcX
dp_np = input(2, 0) - $drcX
dp_p = input(3, 0) - $drcX
dp_n = input(4, 0) - $drcX
dp_e = input(5, 0) - $drcX

m2_nw = input(12, 0) - $drcX

m1_nwpad = input(11, 99) + input(11, 0) - $drcX
m4_ledpad = input(14, 0) + input(14, 99) - $drcX
m3_res = input(15, 0) - $drcX
m5_wiring = input(16, 0) + input(16, 99) - $drcX

via3_nw = input(31, 0) - $drcX
via5_bond = input(32, 0) - $drcX

su8 = input(51, 0) - $drcX

floorplan_layer = input(99)
port_layer = input(41)

### Compound layers
si_rib = si_deep.not(si_shallow)
si_partial = si_deep.and(si_shallow)
# Anywhere there is not si_deep, si_partial doesn't matter


######## GDS detail checks ########
all_inputs = [si_deep, si_shallow, si_deep_photo, \
    dp_pp, dp_np, dp_p, dp_n, dp_e, \
    m1_nwpad, m2_nw, m3_res, m4_ledpad, m5_wiring,
    via3_nw, via5_bond]

disallowed_layers = input("100-999") - input(255)
disallowed_layers.output("Reserved layer", "These layers are not for use by the user")

odd_polys = polygon_layer
outside_fp = polygon_layer
for ly in all_inputs
    odd_polys += ly.odd_polygons()
    outside_fp += ly.not_inside(floorplan_layer)
end
odd_polys.output("Odd polygon", "Odd polygon (self-intersecting) in any layer")
outside_fp.output("Boundary","Geometry outside of floorplan")


######## Width and self-gap checks ########
# Silicon
r = si_rib.width(0.1, angle_limit(40))
output_drcX(r, "Si_width", "Si minimum feature size violation; min 0.1 um")
r = si_rib.space(0.1, angle_limit(40))
output_drcX(r, "Si_space", "Si minimum space violation; min 0.1 um")

r = si_partial.width(0.1, angle_limit(40))
output_drcX(r, "Partial_width", "Si minimum feature size violation; min 0.1 um")
r = (si_rib + si_partial).space(0.1, angle_limit(40))
output_drcX(r, "Partial_space", "Si minimum space violation; min 0.1 um")

r = si_deep_photo.width(2.0, angle_limit(40))
output_drcX(r, "SiPhoto_width", "Si photolith minimum feature size violation; min 2.0 um")
r = si_deep_photo.space(2.0, angle_limit(40))
output_drcX(r, "SiPhoto_space", "Si photolith minimum space violation; min 2.0 um")
r = si_deep_photo.separation(si_rib, 2.0)
output_drcX(r, "Si photolith too close to normal Si; min 2.0 um")


# Dopants
r = dp_pp.width(1.0, angle_limit(80))
output_drcX(r, "Dopant_P+_width", "P+ dopant minimum feature size violation; min 1.0 um")
r = dp_pp.space(1.0)
output_drcX(r, "Dopant_P+_space", "P+ dopant minimum space violation; min 1.0 um")

r = dp_np.width(1.0, angle_limit(80))
output_drcX(r, "Dopant_N+_width", "N+ dopant minimum feature size violation; min 1.0 um")
r = dp_np.space(1.0)
output_drcX(r, "Dopant_N+_space", "N+ dopant minimum space violation; min 1.0 um")

r = dp_p.width(1.0, angle_limit(80))
output_drcX(r, "Dopant_P_width", "P dopant minimum feature size violation; min 1.0 um")
r = dp_p.space(1.0)
output_drcX(r, "Dopant_P_space", "P dopant minimum space violation; min 1.0 um")

r = dp_n.width(1.0, angle_limit(80))
output_drcX(r, "Dopant_N_width", "N dopant minimum feature size violation; min 1.0 um")
r = dp_n.space(1.0)
output_drcX(r, "Dopant_N_space", "N dopant minimum space violation; min 1.0 um")

r = dp_e.width(1.0, angle_limit(80))
output_drcX(r, "Dopant_E_width", "E dopant minimum feature size violation; min 1.0 um")
r = dp_e.space(1.0)
output_drcX(r, "Dopant_E_space", "E dopant minimum space violation; min 1.0 um")

# Metal
r = m1_nwpad.width(1.0, angle_limit(80))
output_drcX(r, "M1_width", "M1 minimum feature size violation; min 1.0 um")
r = m1_nwpad.space(1.0)
output_drcX(r, "M1_space", "M1 minimum space violation; min 1.0 um")

r = m2_nw.width(0.040, angle_limit(80))
output_drcX(r, "NW_width", "NW minimum feature size violation; min 40nm")
r = m2_nw.space(0.040, projection_limits(0.005, 0.050))
# r = m2_nw.space(0.040)  # It really slows down without these limits
output_drcX(r, "NW_space", "NW minimum space violation; min 40nm")

r = m3_res.width(1.0, angle_limit(80))
output_drcX(r, "M3_width", "M3 minimum feature size violation; min 1.0 um")
r = m3_res.space(1.0)
output_drcX(r, "M3_space", "M3 minimum space violation; min 1.0 um")

r = m4_ledpad.width(1.0, angle_limit(80))
output_drcX(r, "M4_width", "M4 minimum feature size violation; min 1.0 um")
r = m4_ledpad.space(1.0)
output_drcX(r, "M4_space", "M4 minimum space violation; min 1.0 um")

r = m5_wiring.width(1.0, angle_limit(40))
output_drcX(r, "M5_width", "M5 minimum feature size violation; min 1.0 um")
r = m5_wiring.space(1.0, angle_limit(40))
output_drcX(r, "M5_space", "M5 minimum space violation; min 1.0 um")

# Vias
r = via3_nw.width(0.5)
output_drcX(r, "Via3_width", "Via3 minimum feature size violation; min 0.5 um")
r = via3_nw.space(2.0)
output_drcX(r, "Via3_space", "Via3 minimum space violation; min 2.0 um")

r = via5_bond.width(0.5, angle_limit(80))
output_drcX(r, "Via5_width", "Via5 minimum feature size violation; min 0.5 um")
r = via5_bond.space(2.0)
output_drcX(r, "Via5_space", "Via5 minimum space violation; min 2.0 um")

# Polymers
r = su8.width(1.0, angle_limit(40))
output_drcX(r, "SU-8_width", "SU-8 minimum feature size violation; min 1.0 um")
r = su8.space(1.0, angle_limit(40))
output_drcX(r, "SU-8_space", "SU-8 minimum space violation; min 1.0 um")
r = su8.merged(2)
output_drcX(r, "SU-8_overlap", "SU-8 pads ovarlapping not allowed")

######## Enclosures with silicon steps #########
# LED pads must be entirely on partial etch silicon,vbgdc inclusions apply
# TODO: check with Jeff
ledpad_si_inclusion = 0.2  # Not specified in DRC document
partial_only = si_partial - si_rib
terrace_errors = m4_ledpad - $drcX - partial_only
terrace_errors.output("LEDpad_step", "LED pad must be on partial")

# This block shows how to allows multi levels, but not steps between
# too_close_m4 = m4_ledpad.sized(ledpad_si_inclusion).interacting(partial_only.edges)
# inclusion_errors = too_close_m4 - terrace_errors.sized(ledpad_si_inclusion)
# output_drcX(inclusion_errors, "LEDpad_inclusion", "LED pad must be isolated from steps")

# Dopants must be on silicon to work, but it won't cause a problem if not
# Designer should be allowed to dope a narrow waveguide
# dopant_si_inclusion = 1.0  # optional

###### Check that ground contacts exist.
# They are easy to leave out
m5_gnd = input(16, 99) - input(255, 0)
if m5_gnd.is_empty?
    polygon_layer.output("No ground pads", "Ground contacts were left out")
end


######## Vias ########
# Via on top of another may turn out to work,
# but it's never necessary (barring space constraints), so best not to allow
# Addendum: since they are the same material now, it might be ok
# via3_nw.separation(via5_bond, 1.0).output("Via_overlap", "You can't put a bond directly on a Ti/Au pad")

# Via 3 from wiring to Ti/Au nanowire pads allowed, inclusions apply
# SC and metal resistor layers must be insulated from wiring layer (covered by same rule)
v3_wiring_inclusion = 2.0
v3_pad_inclusion = 2.0
contactable_layers = m1_nwpad.and(m2_nw) + m4_ledpad + m3_res
rv = (via3_nw - $drcX).sized(v3_pad_inclusion) - contactable_layers
rv.output("Via_pad_inclusion", "The V3 polygon must be &gt;= 2um inside the pad layer edges")
rw = (via3_nw - $drcX).sized(v3_wiring_inclusion) - m5_wiring
rw.output("Via_wire_inclusion", "The V3 polygon must be &gt;= 2um inside the wiring layer edges")

# Via 5 from open air to bond pads on the wiring layer, inclusions apply
# Only wiring can be open to air (covered by same rule)
v5_wiring_inclusion = 5.0
r = (via5_bond - $drcX).sized(v5_wiring_inclusion) - m5_wiring
r.output("Bond_pad_inclusion", "Etch hole to air must fall entirely within Metal 5 wiring")

# Special "via" from LED to wiring layer
dopant_pad_inclusion = 2.0
# Tricky: dopants don't always have to be within the pad layer
# Tricky:


######## Shorts ########
exposed_dopants = dp_pp + dp_np + dp_p + dp_n + dp_e - m4_ledpad
m5_wiring.sized(1.0).interacting(exposed_dopants).output("Wire_on_dopant", "Probably will short")

# m5-m3 crossings are allowed because of the insulating oxide. If there is a hole in the oxide, via rules apply

# Very bad: m5 over a waveguide will interact with the core.

# Possibly bad: m5 going up to the nanowire terrace contacts that silicon slab
# Possibly bad: m5 touching dopants is not allowed, but then it must touch intrinsic silicon - shorts?
# Somehow it is has to be allowed to step from LED terrace (partial) to the nanowire terrace (rib)

# Suggested
# Make two rib layers: waveguide and NW host. This could roughly determine EBeam vs. Photo. It also leads to a design rule, no wiring on WG
# Isotropic oxide growth AFTER etch would prevent wiring to host and wiring to LED shorts
# Wires can't go over waveguides. That is very bad. Wires can't go over other wires. Less bad, still bad
# Contact to LED is complex and tricky to check. Suggest a standard cell to minimize errors, as seen in Jeff's DRC document

</text>
</klayout-macro>
